/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/product": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateProduct"];
        post: operations["createProduct"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 로그인 */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 주문 요청
         * @description 주문 요청이 데이터베이스에 저장됩니다.
         */
        post: operations["order"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/product/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/order/{email}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["list_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/delivery/{email}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 배송 조회
         * @description 고객의 배송 내역을 반환합니다.
         */
        get: operations["list_2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/product/{itemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["deleteProduct"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description 반환 데이터 */
        Empty: Record<string, never>;
        /** @description 결과 반환용 객체 */
        ResultEmpty: {
            /**
             * Format: int32
             * @description 상태 코드
             */
            statusCode: number;
            /** @description 클라 전달용 메시지 */
            message: string;
            data: components["schemas"]["Empty"];
        };
        ProductUpdateRequest: {
            name: string;
            /** Format: int32 */
            price: number;
            description: string;
            /** Format: int32 */
            quantity: number;
        };
        /** @description 결과 반환용 객체 */
        ResultProductUpdateRequest: {
            /**
             * Format: int32
             * @description 상태 코드
             */
            statusCode: number;
            /** @description 클라 전달용 메시지 */
            message: string;
            data: components["schemas"]["ProductUpdateRequest"];
        };
        LoginRequest: {
            username?: string;
            password?: string;
        };
        /** @description 반환 데이터 */
        LoginResponse: {
            username: string;
        };
        /** @description 결과 반환용 객체 */
        ResultLoginResponse: {
            /**
             * Format: int32
             * @description 상태 코드
             */
            statusCode: number;
            /** @description 클라 전달용 메시지 */
            message: string;
            data: components["schemas"]["LoginResponse"];
        };
        ProductCreateRequest: {
            name: string;
            /** Format: int32 */
            price: number;
            description: string;
            /** Format: int32 */
            quantity: number;
        };
        /** @description 반환 데이터 */
        ProductCreateResponse: {
            /** Format: int64 */
            id: number;
            message: string;
        };
        /** @description 결과 반환용 객체 */
        ResultProductCreateResponse: {
            /**
             * Format: int32
             * @description 상태 코드
             */
            statusCode: number;
            /** @description 클라 전달용 메시지 */
            message: string;
            data: components["schemas"]["ProductCreateResponse"];
        };
        /** @description 아이템 정보 */
        OrderItem: {
            /**
             * Format: int64
             * @description 상품 아이디
             */
            productId: number;
            /**
             * Format: int32
             * @description 상품 개수
             */
            quantity: number;
        };
        OrderRequest: {
            items: components["schemas"]["OrderItem"][];
            customerEmail: string;
            address: string;
        };
        /** @description 반환 데이터 */
        OrderResponse: {
            /**
             * Format: int64
             * @description 주문 ID
             */
            id: number;
            /** @description 주문자 이메일 */
            email: string;
            /** @description 주문 품목 */
            items: components["schemas"]["OrderItem"][];
        };
        /** @description 결과 반환용 객체 */
        ResultOrderResponse: {
            /**
             * Format: int32
             * @description 상태 코드
             */
            statusCode: number;
            /** @description 클라 전달용 메시지 */
            message: string;
            data: components["schemas"]["OrderResponse"];
        };
        /** @description 반환 데이터 */
        ProductInfoResponse: {
            /** Format: int64 */
            id: number;
            name: string;
            /** Format: int32 */
            price: number;
            description: string;
        };
        /** @description 결과 반환용 객체 */
        ResultListProductInfoResponse: {
            /**
             * Format: int32
             * @description 상태 코드
             */
            statusCode: number;
            /** @description 클라 전달용 메시지 */
            message: string;
            /** @description 반환 데이터 */
            data: components["schemas"]["ProductInfoResponse"][];
        };
        /** @description 결과 반환용 객체 */
        ResultListOrderResponse: {
            /**
             * Format: int32
             * @description 상태 코드
             */
            statusCode: number;
            /** @description 클라 전달용 메시지 */
            message: string;
            /** @description 반환 데이터 */
            data: components["schemas"]["OrderResponse"][];
        };
        /** @description 반환 데이터 */
        DeliveryResponse: {
            email: string;
            /** Format: date */
            deliveryDate: string;
            items: components["schemas"]["OrderItem"][];
        };
        /** @description 결과 반환용 객체 */
        ResultListDeliveryResponse: {
            /**
             * Format: int32
             * @description 상태 코드
             */
            statusCode: number;
            /** @description 클라 전달용 메시지 */
            message: string;
            /** @description 반환 데이터 */
            data: components["schemas"]["DeliveryResponse"][];
        };
        /** @description 결과 반환용 객체 */
        ResultVoid: {
            /**
             * Format: int32
             * @description 상태 코드
             */
            statusCode: number;
            /** @description 클라 전달용 메시지 */
            message: string;
            /** @description 반환 데이터 */
            data: Record<string, never>;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    updateProduct: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductUpdateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResultProductUpdateRequest"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResultEmpty"];
                };
            };
        };
    };
    createProduct: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductCreateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResultProductCreateResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResultEmpty"];
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResultLoginResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResultEmpty"];
                };
            };
        };
    };
    order: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResultOrderResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResultEmpty"];
                };
            };
        };
    };
    list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResultListProductInfoResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResultEmpty"];
                };
            };
        };
    };
    list_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                email: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResultListOrderResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResultEmpty"];
                };
            };
        };
    };
    list_2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                email: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResultListDeliveryResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResultEmpty"];
                };
            };
        };
    };
    deleteProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                itemId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResultVoid"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResultEmpty"];
                };
            };
        };
    };
}
